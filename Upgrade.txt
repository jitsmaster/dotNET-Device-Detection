Change         internal ISimpleList RankedSignatureIndexes
	to         public ISimpleList RankedSignatureIndexes

in DataSet.cs

Change 
	internal interface ISimpleList
to	
	public  interface ISimpleList

on ISimpleList.cs


Replace the DownloadFile method error handling code for WebException with

            catch (WebException ex)
            {
                //Server response was not 200. Data download can not commence.
                switch (((HttpWebResponse)ex.Response).StatusCode)
                {
                    // Note: needed because TooManyRequests is not available in
                    // earlier versions of the HttpStatusCode enum.
                    case ((HttpStatusCode)429):
                        result = AutoUpdateStatus.
                            AUTO_UPDATE_ERR_429_TOO_MANY_ATTEMPTS;
                        throw;
                    case HttpStatusCode.NotModified:
                        result = AutoUpdateStatus.AUTO_UPDATE_NOT_NEEDED;
                        break;
                    case HttpStatusCode.Forbidden:
                        result = AutoUpdateStatus.AUTO_UPDATE_ERR_403_FORBIDDEN;
                        throw;
                    default:
                        result = AutoUpdateStatus.AUTO_UPDATE_HTTPS_ERR;
                        throw;
                }
            }

on AutoUpdate.cs

Replace static constructor of DetectorModule with

        static DetectorModule()
        {
            _scheduleAutoUpdate();
        }

        internal static void _scheduleAutoUpdate()
        {
            if (Detection.Configuration.Manager.Enabled)
            {
                // If there are licence keys available with which to fetch the 
                // binary data files.
                if (Detection.Configuration.Manager.AutoUpdate &&
                    LicenceKey.Keys.Length > 0)
                {
                    // Start the auto update thread to check for new data files.
                    _autoUpdateDownloadTimer = new Timer(
                        new TimerCallback(AutoUpdate.CheckForUpdate),
                        null,
                        Constants.AutoUpdateDelayedStart,
                        Constants.AutoUpdateSleep);
                }

                // Check the master file more frequently incase it's changed.
                _fileCheckTimer = new Timer(
                    new TimerCallback(WebProvider.CheckDataFileRefresh),
                    null,
                    Constants.FileUpdateDelayedStart,
                    Constants.FileUpdateSleep);
            }
        }

on DetectorModule.cs
This is to allow dynamic key update to trigger update checking

Replace AddKey method with

        public static void AddKey(string key)
        {
            if (IsKeyFormatValid(key) &&
                _dynamicKeys.Contains(key) == false)
                _dynamicKeys.Add(key);

            //aw: after adding dynamic key and the there is only one key
            //recheck for update, since the check for update scheduling is on the
            //stupid static constructor
            if (_dynamicKeys.Count == 1 && DetectorModule._autoUpdateDownloadTimer == null)
                DetectorModule._scheduleAutoUpdate();
        }
on LicenseKey.cs
to trigger autoupdate check after dynamic key is added and auto-updat is not yet triggered.



Comment out:

#if !NUGET_BUILD
[assembly: InternalsVisibleToAttribute("FiftyOne.Tests.Unit")]
[assembly: InternalsVisibleToAttribute("FiftyOne.Tests.Integration")]
#endif

in AssemblyInfo.cs

Also, sign the foundation project
